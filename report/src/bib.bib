@article{PDSU,
author = {Neamtiu, Iulian and Hicks, Michael and Stoyle, Gareth and Oriol, Manuel},
title = {Practical Dynamic Software Updating for C},
year = {2006},
issue_date = {June 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/1133255.1133991},
doi = {10.1145/1133255.1133991},
abstract = {Software updates typically require stopping and restarting an application, but many systems cannot afford to halt service, or would prefer not to. Dynamic software updating (DSU) addresses this difficulty by permitting programs to be updated while they run. DSU is appealing compared to other approaches for on-line upgrades because it is quite general and requires no redundant hardware. The challenge is in making DSU practical: it should be flexible, and yet safe, efficient, and easy to use.In this paper, we present Ginseng, a DSU implementation for C that aims to meet this challenge. We compile programs specially so that they can be dynamically patched, and generate most of a dynamic patch automatically. Ginseng performs a series of analyses that when combined with some simple runtime support ensure that an update will not violate type-safety while guaranteeing that data is kept up-to-date. We have used Ginseng to construct and dynamically apply patches to three substantial open-source server programs---Very Secure FTP daemon, OpenSSH sshd daemon, and GNU Zebra. In total, we dynamically patched each program with three years' worth of releases. Though the programs changed substantially, the majority of updates were easy to generate. Performance experiments show that all patches could be applied in less than 5 ms, and that the overhead on application throughput due to updating support ranged from 0 to at most 32\%.},
journal = {SIGPLAN Not.},
month = {6},
pages = {72–83},
numpages = {12},
keywords = {loop extraction, function indirection, type wrapping, dynamic software updating}
}



@INPROCEEDINGS{FDSU,
  author={Zhang, Min and Ogata, Kazuhiro and Futatsugi, Kokichi},
  booktitle={2015 Asia-Pacific Software Engineering Conference (APSEC)}, 
  title={Towards a Formal Approach to Modeling and Verifying the Design of Dynamic Software Updates}, 
  year={2015},
  volume={},
  number={},
  pages={159-166},
  doi={10.1109/APSEC.2015.28}}


@article{DSU,
author = {Hicks, Michael and Nettles, Scott},
title = {Dynamic Software Updating},
year = {2005},
issue_date = {November 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {6},
issn = {0164-0925},
url = {https://doi.org/10.1145/1108970.1108971},
doi = {10.1145/1108970.1108971},
abstract = {Many important applications must run continuously and without interruption, and yet also must be changed to fix bugs or upgrade functionality. No prior general-purpose methodology for dynamic updating achieves a practical balance between flexibility, robustness, low overhead, ease of use, and low cost.We present an approach for C-like languages that provides type-safe dynamic updating of native code in an extremely flexible manner---code, data, and types may be updated, at programmer-determined times---and permits the use of automated tools to aid the programmer in the updating process. Our system is based on dynamic patches that contain both the updated code and the code needed to transition from the old version to the new. A novel aspect of our patches is that they consist of verifiable native code (e.g. Proof-Carrying Code or Typed Assembly Language), which is native code accompanied by annotations that allow online verification of the code's safety. We discuss how patches are generated mostly automatically, how they are applied using dynamic-linking technology, and how code is compiled to make it updateable.To concretely illustrate our system, we have implemented a dynamically updateable web server, FlashEd. We discuss our experience building and maintaining FlashEd, and generalize to present observations about updateable software development. Performance experiments show that for FlashEd, the overhead due to updating is low: typically less than 1 percent.},
journal = {ACM Trans. Program. Lang. Syst.},
month = {11},
pages = {1049–1096},
numpages = {48},
keywords = {Dynamic software updating, typed assembly language}
}